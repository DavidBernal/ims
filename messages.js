// This file is auto generated by the protocol-buffers cli tool

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var Package = exports.Package = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var ResolveRequest = exports.ResolveRequest = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var ResolveResult = exports.ResolveResult = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

definePackage()
defineResolveRequest()
defineResolveResult()

function definePackage () {
  var Dep = Package.Dep = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  defineDep()

  function defineDep () {
    var enc = [
      encodings.string
    ]

    Dep.encodingLength = encodingLength
    Dep.encode = encode
    Dep.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (!defined(obj.name)) throw new Error("name is required")
      var len = enc[0].encodingLength(obj.name)
      length += 1 + len
      if (!defined(obj.range)) throw new Error("range is required")
      var len = enc[0].encodingLength(obj.range)
      length += 1 + len
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (!defined(obj.name)) throw new Error("name is required")
      buf[offset++] = 10
      enc[0].encode(obj.name, buf, offset)
      offset += enc[0].encode.bytes
      if (!defined(obj.range)) throw new Error("range is required")
      buf[offset++] = 18
      enc[0].encode(obj.range, buf, offset)
      offset += enc[0].encode.bytes
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        name: "",
        range: ""
      }
      var found0 = false
      var found1 = false
      while (true) {
        if (end <= offset) {
          if (!found0 || !found1) throw new Error("Decoded message is not valid")
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.name = enc[0].decode(buf, offset)
          offset += enc[0].decode.bytes
          found0 = true
          break
          case 2:
          obj.range = enc[0].decode(buf, offset)
          offset += enc[0].decode.bytes
          found1 = true
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  var enc = [
    encodings.varint,
    Dep
  ]

  Package.encodingLength = encodingLength
  Package.encode = encode
  Package.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.sameDependencies)) {
      var len = enc[0].encodingLength(obj.sameDependencies)
      length += 1 + len
    }
    if (defined(obj.dependencies)) {
      for (var i = 0; i < obj.dependencies.length; i++) {
        if (!defined(obj.dependencies[i])) continue
        var len = enc[1].encodingLength(obj.dependencies[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    if (defined(obj.devDependencies)) {
      for (var i = 0; i < obj.devDependencies.length; i++) {
        if (!defined(obj.devDependencies[i])) continue
        var len = enc[1].encodingLength(obj.devDependencies[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.sameDependencies)) {
      buf[offset++] = 8
      enc[0].encode(obj.sameDependencies, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.dependencies)) {
      for (var i = 0; i < obj.dependencies.length; i++) {
        if (!defined(obj.dependencies[i])) continue
        buf[offset++] = 18
        varint.encode(enc[1].encodingLength(obj.dependencies[i]), buf, offset)
        offset += varint.encode.bytes
        enc[1].encode(obj.dependencies[i], buf, offset)
        offset += enc[1].encode.bytes
      }
    }
    if (defined(obj.devDependencies)) {
      for (var i = 0; i < obj.devDependencies.length; i++) {
        if (!defined(obj.devDependencies[i])) continue
        buf[offset++] = 26
        varint.encode(enc[1].encodingLength(obj.devDependencies[i]), buf, offset)
        offset += varint.encode.bytes
        enc[1].encode(obj.devDependencies[i], buf, offset)
        offset += enc[1].encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      sameDependencies: 0,
      dependencies: [],
      devDependencies: []
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.sameDependencies = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 2:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.dependencies.push(enc[1].decode(buf, offset, offset + len))
        offset += enc[1].decode.bytes
        break
        case 3:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.devDependencies.push(enc[1].decode(buf, offset, offset + len))
        offset += enc[1].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineResolveRequest () {
  var enc = [
    encodings.string,
    encodings.bool
  ]

  ResolveRequest.encodingLength = encodingLength
  ResolveRequest.encode = encode
  ResolveRequest.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.name)) throw new Error("name is required")
    var len = enc[0].encodingLength(obj.name)
    length += 1 + len
    if (defined(obj.range)) {
      var len = enc[0].encodingLength(obj.range)
      length += 1 + len
    }
    if (defined(obj.production)) {
      var len = enc[1].encodingLength(obj.production)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.name)) throw new Error("name is required")
    buf[offset++] = 10
    enc[0].encode(obj.name, buf, offset)
    offset += enc[0].encode.bytes
    if (defined(obj.range)) {
      buf[offset++] = 18
      enc[0].encode(obj.range, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.production)) {
      buf[offset++] = 24
      enc[1].encode(obj.production, buf, offset)
      offset += enc[1].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      name: "",
      range: "",
      production: false
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.name = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found0 = true
        break
        case 2:
        obj.range = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 3:
        obj.production = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineResolveResult () {
  var enc = [
    encodings.varint
  ]

  ResolveResult.encodingLength = encodingLength
  ResolveResult.encode = encode
  ResolveResult.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.seqs)) {
      var packedLen = 0
      for (var i = 0; i < obj.seqs.length; i++) {
        if (!defined(obj.seqs[i])) continue
        var len = enc[0].encodingLength(obj.seqs[i])
        packedLen += len
      }
      if (packedLen) {
        length += 1 + packedLen + varint.encodingLength(packedLen)
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.seqs)) {
      var packedLen = 0
      for (var i = 0; i < obj.seqs.length; i++) {
        if (!defined(obj.seqs[i])) continue
        packedLen += enc[0].encodingLength(obj.seqs[i])
      }
      if (packedLen) {
        buf[offset++] = 10
        varint.encode(packedLen, buf, offset)
        offset += varint.encode.bytes
      }
      for (var i = 0; i < obj.seqs.length; i++) {
        if (!defined(obj.seqs[i])) continue
        enc[0].encode(obj.seqs[i], buf, offset)
        offset += enc[0].encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      seqs: []
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var packedEnd = varint.decode(buf, offset)
        offset += varint.decode.bytes
        packedEnd += offset
        while (offset < packedEnd) {
          obj.seqs.push(enc[0].decode(buf, offset))
          offset += enc[0].decode.bytes
        }
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
